Note: This document describes the installation of DECnet support on Raspbian
Buster for the Raspberry Pi. This is mostly a manual build and install from
sources.

The kit may be obtained by:

    git clone https://github.com/JohnForecast/RaspbianDECnet

Minimum kernel supported:   4.19.93
Minimum Raspbian release:   2020-02-05

In order to bring up DECnet on Raspbian you will need to compile and install
a new kernel along with its associated modules and dtb files.

1. Clone the RaspbianDECnet repository described above. For the rest of this
   document we'll assume that it is cloned into your home directory so it will
   be located in a ~/RaspbianDECnet directory.

2. Installing a new kernel

   Follow the instructions available at:

          <https://www.raspberrypi.org/documentation/linux/kernel/building.md>

   with the following modifications:

   2.1 After cloning the Linux sources

       We will assume that the Linux sources are cloned into a ~/linux
       directory. Copy the DECnet sources into the linux source directory:

          cp ~/RaspbianDECnet/kernel/include/net/*.h ~/linux/include/net
          rm -rf ~/linux/net/decnet
          cp -r ~/RaspbianDECnet/kernel/net/decnet ~/linux/net

   2.2 After creating the default build configuration

       You will need to enable DECnet in the kernel build. I have only tested
       DECnet as a loadable module. Use one of the Linux configuration
       option (e.g. make config or make menuconfig) to change the kernel
       configuration.

          Networking support --->
             Networking options --->
                DECnet support

       note: DECnet: router support has not been tested.

   2.3 Building a 64-bit kernel
   
       The easiest way to build a new kernel is to install the 64-bit version of piOS and build there.
       Add ARCH=arm64 to all the "make" commands. The kernel will be left in arch/arm64/boot/Image and
       needs to be copied to /boot/kernel8.img. (This build does not seem to generate the top-level dtb
       but the one installed by default seems to work OK. The overlay dtbs are built but don't forget to copy
       them from arch/arm64/boot/dts/overlays).
       
   
   Follow the remainder of the kernel build and installation guide. After a
   reboot the system will include DECnet support but it will not be active yet.

3. Change the MAC address of the ethernet device

   The easiest way to do this is to change it before IPV4 or IPV6 is loaded.
   Create a file called /etc/systemd/network/00-mac.link with:

          [Match]
          OriginalName=eth0

          [Link]
          MACAddress=aa:00:04:00:xx:yy
          NamePolicy=kernel database onboard slot path

   This assumes that you want to change the MAC address of eth0 - change as
   needed for your system. Note: you can use the address converter at

      <http://www.powerdog.com/addrconv.cgi>

   to convert a DECnet address to its associated MAC address.

   This procedure has been tested to work on the Raspberry Pi Zero W wireless
   adapter.

4. Build and install the userland code

         cd ~/RaspbianDECnet/dnprogs
         make all
         sudo make install

   This will result in user applications and manpages being installed in the
   /usr/local tree, libraries in /usr/lib and C header files in
   /usr/include/netdnet.

5. Build the DECnet configuration database (/etc/decnet.conf)

         sudo /usr/local/sbin/decnetconf

   This will ask for the name and address of the node you are configuring and
   will allow you to specify the name and address of other nodes in your
   network. After setting up the configuration you will need to change the
   protection on the configuration database:

         sudo chmod 644 /etc/decnet.conf

6. Startup DECnet

   See the notes section below to decide if you need to change the sysctl parameters.
   
    6A. Startup DECnet at system boot time

        If you wish to start DECnet every time the system boots, add the following
        to /etc/rc.local before the "exit 0" line:

            modprobe decnet addr=area,node
            #sysctl -w net.decnet.no_fc_max_cwnd=n
            dnetd

        Where area,node is your node address (note the comma separator) and will have been
        used above to set the MAC address of the ethernet adapter.

    6B. Startup DECnet on request

        Create a shell script with the following:

            #!/bin/bash

            sudo modprobe decnet addr=area,node
            #sudo sysctl -w net.decnet.no_fc_max_cwnd=n
            sudo dnetd

        Where area,node is your node address (note the comma separator) and will have been
        used above to set the MAC address of the ethernet adapter.


Changes from previous DECnet for Linux releases:

    06/24/2020
    
   1. Discard routing multicast packets (hellos and L1, L2 routing packets) which were not expected to be
      received due to multicast filtering. This can occur if promiscuous mode is enabled on the ethernet
      NIC by programs like tcpdump or when using libpcap.
      
      
    06/23/2020
    
   1. The existing code would send outbound NSP-level packets directly to remote nodes if there was a valid
      neighbour entry. It would ignore the Intra-Ethernet bit in the routing flags which is used to indicate
      that the nodes are on the same ethernet and may communicate. The inbound logic built a new neighbour
      entry which took the intra-ethernet bit into consideration but then discarded it. We now use this new
      neighbour entry for subsequent transmissions once the socket has transitioned into the RUN state.
      
      
    06/19/2020
    
   1. Fix Connect Initate transmit format if the socket has no name binding (VMS cannot handle a NULL name).
   
   2. Fix optional data on received connect confirm. Was taking the data from the wrong location in  the
      message.
      
   3. Fix destination cache destruction. Was causing extra entries to be created in the neighbour cache.
      Sometimes caused designated router to move to the loopback device so the node would become
      inaccessible on the network.
      
   4. Initial checkin for dts.
   
   
    06/10/2020
    
   1. Fixed bugs related to flow control of interrupt messages - both inbound and outbound.
   
   2. Added initial implementation of dtr - DECnet test receiver. Tested against RSX, VMS and Ultrix
      implementations.
      
      
    05/28/2020
    
   1. Merged changes which were already in the 5.4 kernel tree. This included changed kernel APIs and
      updated comments.
      
    05/27/2020

   1. Fixed system panic when using the loopback device.


    05/22/2020
    
   1. Implemented the missing LISTEN TIMER so that we can detect failed routers and added additional
      code to allow changing the designated router. Note that in order to make the LISTEN TIMER
      available to network management I had to change the format of /proc/net/decnet_dev so, if you
      want network management support via nml or nml2 you must rebuild and install nml or nml2
      after installing these kernel changes.
      
      
    05/19/2020:
    
   1. Added HELLO TIMER to CIRCUITS CHARACTERISTICS. Unable to add LISTEN TIMER until we can pull
      the timer value from the router hello message and implement the T4 timer.
      
      
    05/17/2020:
    
   1. Added a new Network Management Listener (NML) in dnprog/nml2. This version supports
      SUMMARY, STATUS and CHARACTERISTICS for NODES, CIRCUITS and AREAS. I have not made this
      version the default yet. To install it after installing everything else:
      
            cd dnprogs/nml2
            make
            sudo make install
            
            
    05/08/2020:
    
   1. Network Management Listener (NML) now supports 2 additional NICE requests:
   
        - SHOW ACTIVE CIRCUITS
        - SHOW ACTIVE NODES
        
   2. If an earlier version of decnet.ko was loaded via modprobe and supplied with an invalid
      area or address, it would skip loading /proc/net/decnet_dev which would result in certain
      network management requests failing. We now create the file and generate an error message
      when dnetd is started.
      
      
    02/10/2020:
    
   1. Previous versions incorrectly accepted zero value for area and/or node
      via the kernel /proc interface although the decnetconf script
      mentioned above disallowed it.

   2. Special handling has been added for connections to area 0:

              0.0      - Means connect to the local node
              0.n      - Means connect to node n in the local node's area

   3. Automatically determine whether to use DECnet-VMS syntax for specifying
      access control information (node"username password account"::filespec)
      or DECnet-Ultrix and DECnet-RSX syntax
      (node/username/password/account::filespec) based of the first character
      following the nodename.

      This support is available in the file access utilities (dndir, dntype,
      etc) and dntask.
      
   4. This version now handles delayed ack requests for both inbound and outbound
      data messages.


Notes:

   1. If a remote system does not use message or segment flow control the congestion window size will be clamped to 1 which
      means that data will be transmitted synchronously to the remote system one packet at a time; send packet, wait for ack,
      send packet ... You can change this behaviour by uncommenting the sysctl command in each of the startup descriptions
      above and selecting a suitable value.
      
      The flow control mechanism used may be different in each direction and is typically constant for a specific
      system implementation. The following table is not exhaustive:
      
            Linux (this implementation)             No flow control
            VAX/VMS 7.3 - Phase IV                  No flow control
            RSX-11M+ 4.6                            Session control message flow control
            Ultrix 2.2                              No flow control
            Ultrix 4.0                              No flow control
      
   2. Delayed acks are an optional DECnet component to reduce the amount of traffic flowing over the network. There is a
      sysctl parameter, "net.decnet.dlyack_seq" which is set to a default value of 3. This means that when sending large
      blocks of data, every third packet will request an explicit ack. In order to make use of delayed acks when the remote
      system supports "no flow control", "net.decnet.no_fc_max_cwnd" should be increased and, ideally, should be at least
      2 * net.decnet.dlyack_seq.
      
   3. As of 5/5/2020 I changed the startup sequence as described in section 6 above. The old version failed to create
      /proc/net/decnet_dev which describes the devices being used.
      
Systems Tested:

Raspberry Pi Zero W (2019-7-10 version of Raspbian Buster)

Raspberry Pi 2B V1.1 (2019-7-10 version of Raspbian Buster)

Raspberry Pi 4B (2 GB)(2019-7-10 and 2019-9-26 versions of Raspbian Buster)

Raspberry Pi 4B (2 GB) "testing" 64-bit Raspbian kernel (still uses 32-bit userland).

In addition this code has been tested on Debian 10.0 (Buster) on x86 systems (both 32 and 64-bit systems).

Due to kernel changes, the above no longer work.

Raspberry Pi 4B (2 GB) 2020-02-05 version of Raspbian Buster

Raspberry Pi 4B (2 GB) 2020-02-13 version of Raspbian Buster

Raspberry Pi 4B (2 GB) 2020-02-13 version of Raspbian Buster running kernel 5.4.42 (32-bit)

With the name change to Raspberry Pi OS:

    32-bit:
    
    Raspberry Pi Zero W 2020-05-27 version of Pi OS with kernel 4.19.126 and 5.4.44
    
    Raspberry Pi 4B (2 GB) 2020-05-27 version of Pi OS with kernel 4.19.126 and 5.4.44
    
    64-bit:
    
    Raspberry Pi 4B (8 GB) 2020-05-27 version (fully updated on 6/26/2020) with kernel 5.4.49
    
    



